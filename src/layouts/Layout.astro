---
import "@/styles/global.css";
import { Header, Footer, PostHog } from "@/components";
import { ClientRouter } from "astro:transitions";

interface Props {
  title?: string;
  description?: string;
  image?: string;
  imageAlt?: string;
  type?: "website" | "article";
  publishedTime?: string;
  modifiedTime?: string;
  tags?: string[];
  author?: string;
}

const {
  title = "jass",
  description = "Jass's personal website and blog",
  image,
  imageAlt,
  type = "website",
  publishedTime,
  modifiedTime,
  tags,
  author = "Jass",
} = Astro.props;

// Construct full URLs for Open Graph
const canonicalURL = new URL(
  Astro.url.pathname,
  Astro.site || "https://jass.gg",
);
const imageURL = image ? new URL(image, Astro.site || "https://jass.gg") : null;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/webp" href="/favicon.webp" />
    <meta name="generator" content={Astro.generator} />

    <!-- Basic meta tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Open Graph meta tags -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:site_name" content="jass.gg" />

    {
      imageURL && (
        <>
          <meta property="og:image" content={imageURL} />
          <meta property="og:image:alt" content={imageAlt || title} />
          <meta property="og:image:width" content="1200" />
          <meta property="og:image:height" content="630" />
        </>
      )
    }

    {
      publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )
    }
    {
      modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
      )
    }
    {author && <meta property="article:author" content={author} />}
    {tags && tags.map((tag) => <meta property="article:tag" content={tag} />)}

    <!-- Twitter Card meta tags -->
    <meta
      name="twitter:card"
      content={imageURL ? "summary_large_image" : "summary"}
    />
    <meta name="twitter:creator" content="@jassdotgg" />
    <meta name="twitter:site" content="@jassdotgg" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />

    {
      imageURL && (
        <>
          <meta name="twitter:image" content={imageURL} />
          <meta name="twitter:image:alt" content={imageAlt || title} />
        </>
      )
    }

    <ClientRouter />
    <PostHog />
  </head>
  <body class="dark bg-background text-foreground h-full min-h-screen w-full">
    <Header />
    <slot />
    <Footer />
  </body>
</html>

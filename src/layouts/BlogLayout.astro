---
import ASSETS from "@/assets";
import { Badge, BlurBottomBlogBanner } from "@/components";
import { Layout } from "@/layouts";
import type { CollectionEntry } from "astro:content";

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { title, createdAt, updatedAt, tags, bannerImage, bannerImageAlt } =
  post.data;

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  }).format(date);
};

const getReadingTime = (content: string) => {
  const wordsPerMinute = 200;
  const wordCount = content?.trim().split(/\s+/).length;
  const readingTime = Math.ceil(wordCount / wordsPerMinute);
  return readingTime;
};

const getBannerImagePath = (bannerImage: string | undefined) => {
  if (!bannerImage) return null;
  // If it's already a full path (starts with / or http), use as-is
  if (bannerImage.startsWith("/") || bannerImage.startsWith("http")) {
    return bannerImage;
  }
  // Otherwise, construct path to public/blog folder
  return `/src/assets/blog/${bannerImage}`;
};
---

<Layout>
  <main class="container-narrow py-8 md:py-12">
    <!-- Back to blog link -->
    <nav class="mb-8">
      <a
        href="/blog"
        class="text-muted-foreground hover:text-foreground inline-flex items-center gap-2 text-sm transition-colors"
        data-ph-capture-attribute-action="back_to_blog"
        data-ph-capture-attribute-source="blog_post">
        <img
          {...ASSETS.ICONS.MOVE_LEFT_MUTED}
          class="h-6 w-6"
          alt="move left"
        />
        Back to blog
      </a>
    </nav>

    <!-- Banner Image with overlay -->
    {
      getBannerImagePath(bannerImage) && (
        <div class="relative -mx-4 mb-8 md:-mx-8 lg:-mx-12">
          <div class="relative h-64 overflow-hidden rounded-xs md:h-80 lg:h-96">
            <img
              src={getBannerImagePath(bannerImage)}
              alt={bannerImageAlt || title}
              class="h-full w-full object-cover brightness-75 contrast-125 transition-all duration-300"
              loading="eager"
            />

            <div class="absolute inset-0">
              <BlurBottomBlogBanner />
            </div>

            <div class="absolute right-0 bottom-0 left-0 z-10 p-6 md:p-8">
              <h1 class="font-comic-neue mb-4 text-3xl font-bold text-white drop-shadow-lg md:text-4xl lg:text-5xl">
                {title}
              </h1>

              <div class="flex flex-wrap items-center gap-4 text-white/90">
                <div class="flex items-center gap-2 text-sm">
                  <span>{getReadingTime(post.body ?? "")} min read</span>
                  <span>•</span>
                  <time datetime={createdAt.toISOString()}>
                    {formatDate(createdAt)}
                  </time>
                  {updatedAt && updatedAt.getTime() !== createdAt.getTime() && (
                    <>
                      <span>•</span>
                      <span>Updated {formatDate(updatedAt)}</span>
                    </>
                  )}
                </div>

                {tags && tags.filter((tag) => tag.trim()).length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {tags
                      .filter((tag) => tag.trim())
                      .slice(0, 4)
                      .map((tag: string) => (
                        <Badge
                          class="border-white/30 bg-white/20 text-white hover:bg-white/30"
                          data-ph-capture-attribute-tag={tag}
                          data-ph-capture-attribute-action="tag_view"
                          data-ph-capture-attribute-source="blog_post">
                          {tag}
                        </Badge>
                      ))}
                    {tags.filter((tag) => tag.trim()).length > 4 && (
                      <span class="px-2 py-1 text-xs text-white/80">
                        +{tags.filter((tag) => tag.trim()).length - 4} more
                      </span>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )
    }

    <!-- Article header (fallback for posts without banner) -->
    {
      !getBannerImagePath(bannerImage) && (
        <header class="mb-8">
          <h1 class="font-comic-neue text-primary mb-4 text-3xl font-bold md:text-4xl lg:text-5xl">
            {title}
          </h1>

          <div class="mb-4 flex items-center justify-between">
            <div class="text-muted-foreground flex items-center gap-2 text-sm">
              <span>{getReadingTime(post.body ?? "")} min read</span>
              <span>•</span>
              <time datetime={createdAt.toISOString()}>
                {formatDate(createdAt)}
              </time>
              {updatedAt && updatedAt.getTime() !== createdAt.getTime() && (
                <>
                  <span>•</span>
                  <span>Updated {formatDate(updatedAt)}</span>
                </>
              )}
            </div>

            {tags && tags.filter((tag) => tag.trim()).length > 0 && (
              <div class="flex flex-wrap gap-2">
                {tags
                  .filter((tag) => tag.trim())
                  .slice(0, 4)
                  .map((tag: string) => (
                    <Badge
                      data-ph-capture-attribute-tag={tag}
                      data-ph-capture-attribute-action="tag_view"
                      data-ph-capture-attribute-source="blog_post">
                      {tag}
                    </Badge>
                  ))}
                {tags.filter((tag) => tag.trim()).length > 4 && (
                  <span class="text-muted-foreground px-2 py-1 text-xs">
                    +{tags.filter((tag) => tag.trim()).length - 4} more
                  </span>
                )}
              </div>
            )}
          </div>
        </header>
      )
    }

    <!-- Article content -->
    <article
      class="prose prose-neutral dark:prose-invert prose-lg max-w-none"
      data-ph-post-content="true">
      <slot />
    </article>
  </main>
</Layout>

<script
  define:vars={{
    postTitle: title,
    postId: post.id,
    postTags: tags || [],
    estimatedReadingTime: getReadingTime(post.body ?? ""),
    createdAt: createdAt.toISOString(),
    updatedAt: updatedAt?.toISOString(),
  }}
>
  if (typeof window !== "undefined" && window.posthog) {
    const startTime = Date.now();
    let maxScrollDepth = 0;
    let hasReachedEnd = false;
    let readingStartTime = null;
    let activeReadingTime = 0;
    let isVisible = true;

    // Track initial blog post view
    window.posthog.capture("blog_post_viewed", {
      post_title: postTitle,
      post_id: postId,
      post_tags: postTags,
      estimated_reading_time: estimatedReadingTime,
      post_created_at: createdAt,
      post_updated_at: updatedAt,
      page_url: window.location.href,
      referrer: document.referrer,
      source_page: document.referrer.includes("/blog")
        ? "blog_listing"
        : "direct_or_external",
    });

    // Track when user starts actively reading (first scroll or 5 seconds)
    let hasStartedReading = false;
    const markReadingStart = () => {
      if (!hasStartedReading) {
        hasStartedReading = true;
        readingStartTime = Date.now();
        window.posthog?.capture("blog_post_reading_started", {
          post_title: postTitle,
          post_id: postId,
          time_to_start_reading: Date.now() - startTime,
        });
      }
    };

    // Auto-mark reading started after 5 seconds
    setTimeout(markReadingStart, 5000);

    // Track scroll behavior and reading progress
    let scrollTimeout;
    window.addEventListener("scroll", () => {
      markReadingStart();
      clearTimeout(scrollTimeout);

      scrollTimeout = setTimeout(() => {
        const scrollDepth = Math.round(
          (window.scrollY /
            (document.documentElement.scrollHeight - window.innerHeight)) *
            100,
        );

        if (scrollDepth > maxScrollDepth) {
          maxScrollDepth = scrollDepth;

          // Track reading progress milestones
          if (scrollDepth >= 25 && scrollDepth % 25 === 0) {
            window.posthog?.capture("blog_post_reading_progress", {
              post_title: postTitle,
              post_id: postId,
              scroll_depth: scrollDepth,
              time_spent: Math.round((Date.now() - startTime) / 1000),
            });
          }

          // Track when user reaches the end
          if (scrollDepth >= 90 && !hasReachedEnd) {
            hasReachedEnd = true;
            window.posthog?.capture("blog_post_completed", {
              post_title: postTitle,
              post_id: postId,
              time_to_complete: Math.round((Date.now() - startTime) / 1000),
              estimated_reading_time: estimatedReadingTime,
              reading_speed_ratio:
                estimatedReadingTime > 0
                  ? Math.round((Date.now() - startTime) / 1000) /
                    (estimatedReadingTime * 60)
                  : 0,
            });
          }
        }
      }, 100);
    });

    // Track page visibility changes to measure active reading time
    document.addEventListener("visibilitychange", () => {
      if (document.hidden) {
        isVisible = false;
        if (readingStartTime) {
          activeReadingTime += Date.now() - readingStartTime;
          readingStartTime = null;
        }
      } else {
        isVisible = true;
        if (hasStartedReading) {
          readingStartTime = Date.now();
        }
      }
    });

    // Track clicks on back to blog link
    document.addEventListener("click", (event) => {
      const target = event.target;
      const backLink = target.closest(
        '[data-ph-capture-attribute-action="back_to_blog"]',
      );

      if (backLink) {
        const totalTime = Math.round((Date.now() - startTime) / 1000);
        const finalActiveTime = readingStartTime
          ? activeReadingTime + (Date.now() - readingStartTime)
          : activeReadingTime;

        window.posthog?.capture("blog_post_back_to_listing", {
          post_title: postTitle,
          post_id: postId,
          time_spent_total: totalTime,
          time_spent_active: Math.round(finalActiveTime / 1000),
          max_scroll_depth: maxScrollDepth,
          completed_reading: hasReachedEnd,
          source: backLink.getAttribute("data-ph-capture-attribute-source"),
        });
      }
    });

    // Track tag interactions
    document.addEventListener("click", (event) => {
      const target = event.target;
      const tagElement = target.closest("[data-ph-capture-attribute-tag]");

      if (tagElement) {
        const tag = tagElement.getAttribute("data-ph-capture-attribute-tag");
        const action = tagElement.getAttribute(
          "data-ph-capture-attribute-action",
        );
        const source = tagElement.getAttribute(
          "data-ph-capture-attribute-source",
        );

        window.posthog?.capture("blog_tag_interaction", {
          tag_name: tag,
          action: action,
          source_page: source,
          post_title: postTitle,
          post_id: postId,
          page_url: window.location.href,
        });
      }
    });

    // Track when user leaves the page
    window.addEventListener("beforeunload", () => {
      const totalTime = Math.round((Date.now() - startTime) / 1000);
      const finalActiveTime = readingStartTime
        ? activeReadingTime + (Date.now() - readingStartTime)
        : activeReadingTime;

      window.posthog?.capture("blog_post_session_end", {
        post_title: postTitle,
        post_id: postId,
        time_spent_total: totalTime,
        time_spent_active: Math.round(finalActiveTime / 1000),
        max_scroll_depth: maxScrollDepth,
        completed_reading: hasReachedEnd,
        estimated_reading_time: estimatedReadingTime,
        reading_efficiency:
          estimatedReadingTime > 0
            ? Math.round(finalActiveTime / 1000) / (estimatedReadingTime * 60)
            : 0,
        page_url: window.location.href,
      });
    });

    // Track copy events (useful for understanding what content is being shared)
    document.addEventListener("copy", () => {
      const selection = window.getSelection()?.toString();
      if (selection && selection.length > 10) {
        window.posthog?.capture("blog_post_content_copied", {
          post_title: postTitle,
          post_id: postId,
          copied_text_length: selection.length,
          copied_text_preview:
            selection.substring(0, 100) + (selection.length > 100 ? "..." : ""),
          scroll_position: maxScrollDepth,
        });
      }
    });
  }
</script>
